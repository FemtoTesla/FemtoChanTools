// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

Texture2D<float4> SourceTexture;
SAMPLER(sampler_SourceTexture);
float TextureSize;
RWTexture2D<float4> RenderTexture;
float Edge;


inline float2 GetUV(float2 pos, float2 size)
{
    return pos/size;
}

inline bool colorsDiffer(float4 color1, float4 color2) {
    return any(color1 != color2);
}

inline float DistanceBetweenUVs(float2 uv1, float2 uv2)
{
    return distance(uv1 * TextureSize, uv2 * TextureSize);
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float w, h;
    SourceTexture.GetDimensions(w, h);
    float2 uv = float2(id.x/w, id.y/h);
    float4 sourceColor = SourceTexture.SampleLevel(sampler_SourceTexture, uv, 0);

    if(all(sourceColor == float4(1,1,1,1))) 
    {
        RenderTexture[id.xy] = 0;
        return;
    }

    float minDistance = float(TextureSize + TextureSize);
    for (int i = -Edge; i < Edge; i++)
    {
        for (int j = -Edge; j < Edge; j++)
        {
            float2 sampleUV = float2((id.x + i)/w, (id.y + j)/h);
            float4 sampleColor = SourceTexture.SampleLevel(sampler_SourceTexture, sampleUV, 0);

            if (colorsDiffer(sampleColor, sourceColor))
            {
                float distance = DistanceBetweenUVs(uv, sampleUV);
                minDistance = min(minDistance, distance);
            }
        }
    }

    RenderTexture[id.xy] = 1 - float4(minDistance/Edge,minDistance/Edge,minDistance/Edge,0);
}